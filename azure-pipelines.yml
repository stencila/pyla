# Azure Pipelines config

jobs:
  - job: test
    strategy:
      matrix:
        linux_37:
          image_name: ubuntu-latest
          python_version: 3.7
          tox_env: py37
        linux_36:
          image_name: ubuntu-latest
          python_version: 3.6
          tox_env: py36
        mac:
          image_name: macOS-latest
          python_version: 3.7
          tox_env: py37

        # Tests currently fail on windows
        # See https://github.com/stencila/pyla/issues/2
        # windows:
        #  image_name: windows-latest
        #  python_version: 3.7
        #  tox_env: py37
    pool:
      vmImage: $(image_name)
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python_version)
        displayName: 'Install Python $(python_version)'

      - script: pip3 install --upgrade -r requirements-dev.txt
        displayName: 'Install dev dependencies'

      - script: tox -e $(tox_env)
        displayName: 'Run tests'

      - script: make build
        displayName: 'Build package'

      # Only do, these platform independent tasks on Linux and only
      # if succeeded so far

      - script: make lint
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: 'Linting'
      
      - script: make docs
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: 'Build docs'

      - script: bash <(curl -s https://codecov.io/bash)
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: 'Upload coverage'


  - job: deploy
    dependsOn: test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.7
        displayName: 'Install Python'

      - script: |
          # Deploy package
          git config user.name "Stencila CI Bot"
          git config user.email "ci@stenci.la"
          pip3 install python-semantic-release
          semantic-release publish
          # Deploy docs
          sudo python3 setup.py develop
          make docs
          git checkout gh-pages
          ls -a | grep -v 'docs\|(\.git)' | xargs rm -rf
          cp -r docs/_build/. .
          rm -rf docs
          git commit -m "docs(*): Update published docs"
          git push --set-upstream origin gh-pages
        env:
          GH_TOKEN: $(GH_TOKEN)
          PYPI_USERNAME: stencila
          PYPI_PASSWORD: $(PYPI_PASSWORD)
        displayName: 'Deploy package'
